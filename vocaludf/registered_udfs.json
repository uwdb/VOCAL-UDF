{
    "charades_base": [
        {
            "signature": "object(o0, 'name')",
            "description": "Whether o0 is an object with the given name, where 'name' can be one of the following: ['person', 'bag', 'bed', 'blanket', 'book', 'box', 'broom', 'chair', 'closet/cabinet', 'clothes', 'cup/glass/bottle', 'dish', 'door', 'doorknob', 'doorway', 'floor', 'food', 'groceries', 'laptop', 'light', 'medicine', 'mirror', 'paper/notebook', 'phone/camera', 'picture', 'pillow', 'refrigerator', 'sandwich', 'shelf', 'shoe', 'sofa/couch', 'table', 'television', 'towel', 'vacuum', 'window'].",
            "function_implementation": ""
        },
        {
            "signature": "touching(o0, o1)",
            "description": "Whether o0 is touching o1.",
            "function_implementation": ""
        },
        {
            "signature": "leaning_on(o0, o1)",
            "description": "Whether o0 is leaning on o1.",
            "function_implementation": ""
        },
        {
            "signature": "wearing(o0, o1)",
            "description": "Whether o0 is wearing o1.",
            "function_implementation": ""
        },
        {
            "signature": "drinking_from(o0, o1)",
            "description": "Whether o0 is drinking from o1.",
            "function_implementation": ""
        },
        {
            "signature": "lying_on(o0, o1)",
            "description": "Whether o0 is lying on o1.",
            "function_implementation": ""
        },
        {
            "signature": "writing_on(o0, o1)",
            "description": "Whether o0 is writing on o1.",
            "function_implementation": ""
        },
        {
            "signature": "twisting(o0, o1)",
            "description": "Whether o0 is twisting o1.",
            "function_implementation": ""
        },
        {
            "signature": "above(o0, o1)",
            "description": "Whether o0 is above o1.",
            "function_implementation": ""
        },
        {
            "signature": "in_front_of(o0, o1)",
            "description": "Whether o0 is in front of o1.",
            "function_implementation": ""
        }
    ],
    "cityflow_base": [
        {
            "signature": "above(o0, o1)",
            "description": "Whether o0 is above o1.",
            "function_implementation": ""
        },
        {
            "signature": "beneath(o0, o1)",
            "description": "Whether o0 is beneath o1.",
            "function_implementation": ""
        },
        {
            "signature": "behind(o0, o1)",
            "description": "Whether o0 is behind o1.",
            "function_implementation": ""
        },
        {
            "signature": "suv(o0)",
            "description": "Whether the type of o0 is an SUV.",
            "function_implementation": ""
        },
        {
            "signature": "white(o0)",
            "description": "Whether the color of o0 is white.",
            "function_implementation": ""
        },
        {
            "signature": "grey(o0)",
            "description": "Whether the color of o0 is grey.",
            "function_implementation": ""
        },
        {
            "signature": "van(o0)",
            "description": "Whether the type of o0 is a van.",
            "function_implementation": ""
        }
    ],
    "clevrer_base": [
        {
            "signature": "left_of(o0, o1)",
            "description": "Whether o0 is on the left of o1.",
            "function_implementation": "def left_of(o1_oname, o1_x1, o1_y1, o1_x2, o1_y2, o1_anames, o2_oname, o2_x1, o2_y1, o2_x2, o2_y2, o2_anames, o1_o2_rnames, o2_o1_rnames, height, width):\n    cx_o1 = (o1_x1 + o1_x2) / 2\n    cx_o2 = (o2_x1 + o2_x2) / 2\n    return cx_o1 < cx_o2"
        },
        {
            "signature": "front_of(o0, o1)",
            "description": "Whether o0 is in front of o1.",
            "function_implementation": "def front_of(o1_oname, o1_x1, o1_y1, o1_x2, o1_y2, o1_anames, o2_oname, o2_x1, o2_y1, o2_x2, o2_y2, o2_anames, o1_o2_rnames, o2_o1_rnames, height, width):\n    center_y_o1 = (o1_y1 + o1_y2) / 2\n    center_y_o2 = (o2_y1 + o2_y2) / 2\n    return center_y_o1 > center_y_o2"
        },
        {
            "signature": "location_left(o0)",
            "description": "Whether o0 is on the left of the frame.",
            "function_implementation": "def left(o1_oname, o1_x1, o1_y1, o1_x2, o1_y2, o1_anames, height, width):\n  cx = (o1_x1 + o1_x2) / 2\n  return cx >= 0 and cx < 240"
        },
        {
            "signature": "location_top(o0)",
            "description": "Whether o0 is at the top of the frame.",
            "function_implementation": "def top(o1_oname, o1_x1, o1_y1, o1_x2, o1_y2, o1_anames, height, width):\n  cy1 = (o1_y1 + o1_y2) / 2\n  return cy1 >= 0 and cy1 < 160"
        },
        {
            "signature": "color_gray(o0)",
            "description": "Whether the color of o0 is gray.",
            "function_implementation": "def color_gray(o1_oname, o1_x1, o1_y1, o1_x2, o1_y2, o1_anames, height, width):\n  return 'color_gray' in o1_anames"
        },
        {
            "signature": "color_red(o0)",
            "description": "Whether the color of o0 is red.",
            "function_implementation": "def color_red(o1_oname, o1_x1, o1_y1, o1_x2, o1_y2, o1_anames, height, width):\n  return 'color_red' in o1_anames"
        },
        {
            "signature": "color_blue(o0)",
            "description": "Whether the color of o0 is blue.",
            "function_implementation": "def color_blue(o1_oname, o1_x1, o1_y1, o1_x2, o1_y2, o1_anames, height, width):\n  return 'color_blue' in o1_anames"
        },
        {
            "signature": "color_green(o0)",
            "description": "Whether the color of o0 is green.",
            "function_implementation": "def color_green(o1_oname, o1_x1, o1_y1, o1_x2, o1_y2, o1_anames, height, width):\n  return 'color_green' in o1_anames"
        },
        {
            "signature": "shape_cube(o0)",
            "description": "Whether the shape of o0 is cube.",
            "function_implementation": "def shape_cube(o1_oname, o1_x1, o1_y1, o1_x2, o1_y2, o1_anames, height, width):\n  return 'shape_cube' in o1_anames"
        },
        {
            "signature": "shape_sphere(o0)",
            "description": "Whether the shape of o0 is sphere.",
            "function_implementation": "def shape_shpere(o1_oname, o1_x1, o1_y1, o1_x2, o1_y2, o1_anames, height, width):\n  return 'shape_sphere' in o1_anames"
        },
        {
            "signature": "material_rubber(o0)",
            "description": "Whether the material of o0 is rubber.",
            "function_implementation": "def material_rubber(o1_oname, o1_x1, o1_y1, o1_x2, o1_y2, o1_anames, height, width):\n  return 'material_rubber' in o1_anames"
        }
    ],
    "clevrer": {
        "FAR": {
            "signature": "far(o0, o1)",
            "description": "Whether o0 is far away from o1.",
            "function_implementation": "def far(o1_oname, o1_x1, o1_y1, o1_x2, o1_y2, o1_anames, o2_oname, o2_x1, o2_y1, o2_x2, o2_y2, o2_anames, o1_o2_rnames, o2_o1_rnames, height, width):\n    import math\n    cx1 = (o1_x1 + o1_x2) / 2\n    cy1 = (o1_y1 + o1_y2) / 2\n    cx2 = (o2_x1 + o2_x2) / 2\n    cy2 = (o2_y1 + o2_y2) / 2\n    distance = math.sqrt(math.pow(cx1 - cx2, 2.0) + math.pow(cy1 - cy2, 2.0)) / ((o1_x2 - o1_x1 + o2_x2 - o2_x1) / 2)\n    threshold = 3.0\n    return distance >= threshold"
        },
        "NEAR": {
            "signature": "near(o0, o1)",
            "description": "Whether o0 is near o1.",
            "function_implementation": "def near(o1_oname, o1_x1, o1_y1, o1_x2, o1_y2, o1_anames, o2_oname, o2_x1, o2_y1, o2_x2, o2_y2, o2_anames, o1_o2_rnames, o2_o1_rnames, height, width):\n    import math\n    cx1 = (o1_x1 + o1_x2) / 2\n    cy1 = (o1_y1 + o1_y2) / 2\n    cx2 = (o2_x1 + o2_x2) / 2\n    cy2 = (o2_y1 + o2_y2) / 2\n    distance = math.sqrt(math.pow(cx1 - cx2, 2.0) + math.pow(cy1 - cy2, 2.0)) / ((o1_x2 - o1_x1 + o2_x2 - o2_x1) / 2)\n    threshold = 1.0\n    return distance < threshold"
        },
        "RIGHTOF": {
            "signature": "right_of(o0, o1)",
            "description": "Whether o0 is to the right of o1.",
            "function_implementation": "def right_of(o1_oname, o1_x1, o1_y1, o1_x2, o1_y2, o1_anames, o2_oname, o2_x1, o2_y1, o2_x2, o2_y2, o2_anames, o1_o2_rnames, o2_o1_rnames, height, width):\n    cx_o1 = (o1_x1 + o1_x2) / 2\n    cx_o2 = (o2_x1 + o2_x2) / 2\n    return cx_o1 > cx_o2"
        },
        "BEHIND": {
            "signature": "behind(o0, o1)",
            "description": "Whether o0 is behind o1.",
            "function_implementation": "def behind(o1_oname, o1_x1, o1_y1, o1_x2, o1_y2, o1_anames, o2_oname, o2_x1, o2_y1, o2_x2, o2_y2, o2_anames, o1_o2_rnames, o2_o1_rnames, height, width):\n    center_y_o1 = (o1_y1 + o1_y2) / 2\n    center_y_o2 = (o2_y1 + o2_y2) / 2\n    return center_y_o1 < center_y_o2"
        },
        "BROWN": {
            "signature": "color_brown(o0)",
            "description": "Whether the color of o0 is brown.",
            "function_implementation": "def color_brown(o1_oname, o1_x1, o1_y1, o1_x2, o1_y2, o1_anames, height, width):\n  return 'color_brown' in o1_anames"
        },
        "CYAN": {
            "signature": "color_cyan(o0)",
            "description": "Whether the color of o0 is cyan.",
            "function_implementation": "def color_cyan(o1_oname, o1_x1, o1_y1, o1_x2, o1_y2, o1_anames, height, width):\n  return 'color_cyan' in o1_anames"
        },
        "PURPLE": {
            "signature": "color_purple(o0)",
            "description": "Whether the color of o0 is purple.",
            "function_implementation": "def color_purple(o1_oname, o1_x1, o1_y1, o1_x2, o1_y2, o1_anames, height, width):\n  return 'color_purple' in o1_anames"
        },
        "YELLOW": {
            "signature": "color_yellow(o0)",
            "description": "Whether the color of o0 is yellow.",
            "function_implementation": "def color_yellow(o1_oname, o1_x1, o1_y1, o1_x2, o1_y2, o1_anames, height, width):\n  return 'color_yellow' in o1_anames"
        },
        "CYLINDER": {
            "signature": "shape_cylinder(o0)",
            "description": "Whether the shape of o0 is cylinder.",
            "function_implementation": "def shape_cylinder(o1_oname, o1_x1, o1_y1, o1_x2, o1_y2, o1_anames, height, width):\n  return 'shape_cylinder' in o1_anames"
        },
        "METAL": {
            "signature": "material_metal(o0)",
            "description": "Whether the material of o0 is metal.",
            "function_implementation": "def material_metal(o1_oname, o1_x1, o1_y1, o1_x2, o1_y2, o1_anames, height, width):\n  return 'material_metal' in o1_anames"
        },
        "RIGHT": {
            "signature": "location_right(o0)",
            "description": "Whether o0 is on the right of the frame.",
            "function_implementation": "def right(o1_oname, o1_x1, o1_y1, o1_x2, o1_y2, o1_anames, height, width):\n  cx = (o1_x1 + o1_x2) / 2\n  return cx >= 240 and cx <= 480"
        },
        "BOTTOM": {
            "signature": "location_bottom(o0)",
            "description": "Whether o0 is at the bottom of the frame.",
            "function_implementation": "def bottom(o1_oname, o1_x1, o1_y1, o1_x2, o1_y2, o1_anames, height, width):\n  cy1 = (o1_y1 + o1_y2) / 2\n  return cy1 >= 160 and cy1 <= 320"
        }
    },
    "charades": {
        "HOLDING": {
            "signature": "holding(o0, o1)",
            "description": "Whether o0 is holding o1.",
            "function_implementation": ""
        },
        "SITTINGON": {
            "signature": "sitting_on(o0, o1)",
            "description": "Whether o0 is sitting on o1.",
            "function_implementation": ""
        },
        "STANDINGON": {
            "signature": "standing_on(o0, o1)",
            "description": "Whether o0 is standing on o1.",
            "function_implementation": ""
        },
        "COVEREDBY": {
            "signature": "covered_by(o0, o1)",
            "description": "Whether o0 is covered by o1.",
            "function_implementation": ""
        },
        "CARRYING": {
            "signature": "carrying(o0, o1)",
            "description": "Whether o0 is carrying o1.",
            "function_implementation": ""
        },
        "EATING": {
            "signature": "eating(o0, o1)",
            "description": "Whether o0 is eating o1.",
            "function_implementation": ""
        },
        "WIPING": {
            "signature": "wiping(o0, o1)",
            "description": "Whether o0 is wiping o1.",
            "function_implementation": ""
        },
        "HAVEITONTHEBACK": {
            "signature": "have_it_on_the_back(o0, o1)",
            "description": "Whether o0 has it on the back of o1.",
            "function_implementation": ""
        },
        "BENEATH": {
            "signature": "beneath(o0, o1)",
            "description": "Whether o0 is beneath o1.",
            "function_implementation": ""
        },
        "BEHIND": {
            "signature": "behind(o0, o1)",
            "description": "Whether o0 is behind o1.",
            "function_implementation": ""
        },
        "IN": {
            "signature": "in(o0, o1)",
            "description": "Whether o0 is in o1.",
            "function_implementation": ""
        }
    },
    "cityflow": {
        "TOTHELEFTOF": {
            "signature": "to_the_left_of(o0, o1)",
            "description": "Whether o0 is to the left of o1.",
            "function_implementation": ""
        },
        "TOTHERIGHTOF": {
            "signature": "to_the_right_of(o0, o1)",
            "description": "Whether o0 is to the right of o1.",
            "function_implementation": ""
        },
        "INFRONTOF": {
            "signature": "in_front_of(o0, o1)",
            "description": "Whether o0 is in front of o1.",
            "function_implementation": ""
        },
        "SEDAN": {
            "signature": "sedan(o0)",
            "description": "Whether the type of o0 is a sedan.",
            "function_implementation": ""
        },
        "BLACK": {
            "signature": "black(o0)",
            "description": "Whether the color of o0 is black.",
            "function_implementation": ""
        },
        "RED": {
            "signature": "red(o0)",
            "description": "Whether the color of o0 is red.",
            "function_implementation": ""
        },
        "BLUE": {
            "signature": "blue(o0)",
            "description": "Whether the color of o0 is blue.",
            "function_implementation": ""
        },
        "PICKUPTRUCK": {
            "signature": "pickup_truck(o0)",
            "description": "Whether the type of o0 is a pickup truck.",
            "function_implementation": ""
        }
    }
}








